import{_ as a,B as n,c as l,o as e,ai as t,G as h}from"./chunks/framework.jrH_H5Hh.js";const u=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"my-blog/browser/evenlop.md","filePath":"my-blog/browser/evenlop.md"}'),p={name:"my-blog/browser/evenlop.md"};function k(o,s,r,d,E,c){const i=n("GiscusComment");return e(),l("div",null,[s[0]||(s[0]=t(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>主要知识点有</p><ul><li>消息队列与事件循环</li><li>微任务队列和宏任务队列</li><li>浏览器渲染线程的配合</li></ul><h2 id="_1-任务队列" tabindex="-1">1. 任务队列 <a class="header-anchor" href="#_1-任务队列" aria-label="Permalink to &quot;1. 任务队列&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span></code></pre></div><h3 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h3><ol><li><p><strong>同步任务执行</strong><br> JavaScript 是单线程的，首先会按顺序执行同步代码：</p><ul><li><code>console.info(&quot;1&quot;)</code>：立即输出 <code>1</code>。</li><li><code>new Promise(...)</code>：Promise 构造函数中的回调是同步执行的，所以会立即执行 <code>resolve()</code> 和 <code>console.info(&quot;2&quot;)</code>，输出 <code>2</code>。</li><li><code>setTimeout(...)</code>：将回调函数放入宏任务队列（MacroTask Queue），等待执行。</li><li><code>console.info(&quot;5&quot;)</code>：立即输出 <code>5</code>。</li></ul><p>此时，同步代码执行完毕，输出顺序为 <code>1, 2, 5</code>。</p></li><li><p><strong>微任务队列（MicroTask Queue）</strong><br> 同步代码执行完后，事件循环会检查微任务队列：</p><ul><li>Promise 的 <code>then</code> 回调（<code>() =&gt; { console.info(&quot;3&quot;); }</code>）会被放入微任务队列。</li><li>由于微任务的优先级高于宏任务，事件循环会先执行微任务队列中的任务，输出 <code>3</code>。</li></ul></li><li><p><strong>宏任务队列（MacroTask Queue）</strong><br> 微任务队列清空后，事件循环会从宏任务队列中取出任务执行：</p><ul><li><code>setTimeout</code> 的回调（<code>() =&gt; { console.info(&quot;4&quot;); }</code>）被执行，输出 <code>4</code>。</li></ul></li></ol><h2 id="_2-浏览器原理" tabindex="-1">2. 浏览器原理 <a class="header-anchor" href="#_2-浏览器原理" aria-label="Permalink to &quot;2. 浏览器原理&quot;">​</a></h2><ul><li>笔记 15.15消息队列和事件循环：页面是怎么“活”起来的？</li><li><a href="https://juejin.cn/post/7488927722774069257?searchId=20250418215812FA1A4D791FD39D31AD00" target="_blank" rel="noreferrer">掘金文章</a></li></ul>`,9)),h(i)])}const y=a(p,[["render",k]]);export{u as __pageData,y as default};
