import{_ as t,B as i,c as e,o as h,ai as r,G as o}from"./chunks/framework.jrH_H5Hh.js";const y=JSON.parse('{"title":"Vue Router 的 Hash 模式与 History 模式详解","description":"","frontmatter":{},"headers":[],"relativePath":"my-blog/Vue/router-hash-his.md","filePath":"my-blog/Vue/router-hash-his.md"}'),l={name:"my-blog/Vue/router-hash-his.md"};function n(p,a,d,c,k,u){const s=i("GiscusComment");return h(),e("div",null,[a[0]||(a[0]=r(`<h1 id="vue-router-的-hash-模式与-history-模式详解" tabindex="-1">Vue Router 的 Hash 模式与 History 模式详解 <a class="header-anchor" href="#vue-router-的-hash-模式与-history-模式详解" aria-label="Permalink to &quot;Vue Router 的 Hash 模式与 History 模式详解&quot;">​</a></h1><h2 id="_1-什么是-hash-模式" tabindex="-1">1. 什么是 Hash 模式？ <a class="header-anchor" href="#_1-什么是-hash-模式" aria-label="Permalink to &quot;1. 什么是 Hash 模式？&quot;">​</a></h2><p>Hash 模式是 Vue Router 的默认路由模式。它的 URL 中会带有一个 <code>#</code> 符号，<code>#</code> 后面的部分被称为哈希值，用于表示路由路径。</p><h3 id="_1-hash-模式的-url-示例" tabindex="-1">1. Hash 模式的 URL 示例 <a class="header-anchor" href="#_1-hash-模式的-url-示例" aria-label="Permalink to &quot;1. Hash 模式的 URL 示例&quot;">​</a></h3><p>假设我们有以下路由配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, component: Home },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, component: About },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/contact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, component: Contact }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>使用 Hash 模式时，URL 会显示为以下形式：</p><ul><li>首页：<a href="http://example.com/#/" target="_blank" rel="noreferrer">http://example.com/#/</a></li><li>关于页：<a href="http://example.com/#/about" target="_blank" rel="noreferrer">http://example.com/#/about</a></li><li>联系页：<a href="http://example.com/#/contact" target="_blank" rel="noreferrer">http://example.com/#/contact</a></li></ul><h3 id="_2-hash-模式的特点" tabindex="-1">2. Hash 模式的特点 <a class="header-anchor" href="#_2-hash-模式的特点" aria-label="Permalink to &quot;2. Hash 模式的特点&quot;">​</a></h3><ul><li><strong>URL 中带有 <code>#</code> 符号</strong>：<code>#</code> 后的内容不会发送到服务器，适合单页应用。</li><li><strong>无需服务器配置</strong>：完全由前端处理，服务器无需额外配置。</li><li><strong>兼容性好</strong>：支持所有浏览器，包括不支持 HTML5 History API 的旧浏览器。</li></ul><h3 id="_3-如何启用-hash-模式" tabindex="-1">3. 如何启用 Hash 模式 <a class="header-anchor" href="#_3-如何启用-hash-模式" aria-label="Permalink to &quot;3. 如何启用 Hash 模式&quot;">​</a></h3><p>Hash 模式是 Vue Router 的默认模式，无需额外配置。如果需要显式声明，可以这样写：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认就是 hash 模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_2-什么是-history-模式" tabindex="-1">2. 什么是 History 模式？ <a class="header-anchor" href="#_2-什么是-history-模式" aria-label="Permalink to &quot;2. 什么是 History 模式？&quot;">​</a></h2><p>History 模式利用 HTML5 的 History API（如 <code>pushState</code>、<code>replaceState</code>）实现路由，URL 中没有 <code>#</code> 符号，看起来更加简洁和现代化。</p><h3 id="_1-history-模式的-url-示例" tabindex="-1">1. History 模式的 URL 示例 <a class="header-anchor" href="#_1-history-模式的-url-示例" aria-label="Permalink to &quot;1. History 模式的 URL 示例&quot;">​</a></h3><p>同样以上述路由配置为例，使用 History 模式时，URL 会显示为以下形式：</p><ul><li>首页：<a href="http://example.com/" target="_blank" rel="noreferrer">http://example.com/</a></li><li>关于页：<a href="http://example.com/about" target="_blank" rel="noreferrer">http://example.com/about</a></li><li>联系页：<a href="http://example.com/contact" target="_blank" rel="noreferrer">http://example.com/contact</a></li></ul><h3 id="_2-history-模式的特点" tabindex="-1">2. History 模式的特点 <a class="header-anchor" href="#_2-history-模式的特点" aria-label="Permalink to &quot;2. History 模式的特点&quot;">​</a></h3><ul><li><strong>URL 中无 <code>#</code> 符号</strong>：URL 更加简洁，符合传统 URL 格式。</li><li><strong>需要服务器支持</strong>：由于路径是真实的 URL，刷新页面时服务器需要正确返回 <code>index.html</code>，否则会返回 404 错误。</li><li><strong>现代浏览器支持</strong>：需要浏览器支持 HTML5 History API（现代浏览器均支持）。</li></ul><h3 id="_3-如何启用-history-模式" tabindex="-1">3. 如何启用 History 模式 <a class="header-anchor" href="#_3-如何启用-history-模式" aria-label="Permalink to &quot;3. 如何启用 History 模式&quot;">​</a></h3><p>在 Vue Router 中启用 History 模式，只需将 <code>mode</code> 设置为 <code>history</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 history 模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_2-hash-模式与-history-模式的对比" tabindex="-1">2. Hash 模式与 History 模式的对比 <a class="header-anchor" href="#_2-hash-模式与-history-模式的对比" aria-label="Permalink to &quot;2. Hash 模式与 History 模式的对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Hash 模式</th><th>History 模式</th></tr></thead><tbody><tr><td><strong>URL 格式</strong></td><td>带 <code>#</code>，如 <code>http://example.com/#/about</code></td><td>无 <code>#</code>，如 <code>http://example.com/about</code></td></tr><tr><td><strong>服务器配置</strong></td><td>无需额外配置</td><td>需要配置回退规则，将所有路由指向 <code>index.html</code></td></tr><tr><td><strong>兼容性</strong></td><td>兼容所有浏览器，包括旧浏览器</td><td>需要支持 HTML5 History API 的浏览器（现代浏览器均支持）</td></tr><tr><td><strong>SEO 友好性</strong></td><td>较差（搜索引擎可能忽略 <code>#</code> 后的内容）</td><td>较好（URL 更友好，有利于 SEO）</td></tr><tr><td><strong>适用场景</strong></td><td>简单应用、旧浏览器支持</td><td>现代应用、需要干净的 URL</td></tr></tbody></table><hr><h2 id="_4-如何选择适合的模式" tabindex="-1">4. 如何选择适合的模式？ <a class="header-anchor" href="#_4-如何选择适合的模式" aria-label="Permalink to &quot;4. 如何选择适合的模式？&quot;">​</a></h2><ul><li><strong>Hash 模式</strong>：适合简单的单页应用，或需要兼容旧浏览器的项目。开发和部署更加简单，无需额外配置服务器。</li><li><strong>History 模式</strong>：适合现代应用，尤其是对 URL 美观和 SEO 有较高要求的项目。虽然需要服务器配置，但能提供更好的用户体验和 SEO 效果。</li></ul><hr><h2 id="_5-个人oph-diseases项目使用history" tabindex="-1">5. 个人Oph-Diseases项目使用history <a class="header-anchor" href="#_5-个人oph-diseases项目使用history" aria-label="Permalink to &quot;5. 个人Oph-Diseases项目使用history&quot;">​</a></h2><h3 id="出现的问题有-是服务器部署问题" tabindex="-1">出现的问题有（是服务器部署问题）： <a class="header-anchor" href="#出现的问题有-是服务器部署问题" aria-label="Permalink to &quot;出现的问题有（是服务器部署问题）：&quot;">​</a></h3><ul><li>路由重定向有问题，登录过期无法退转到login，但是我写了重定向 [图片]</li><li>刷新之后404，也是写在onMounted生命周期钩子函数中出现的问题</li><li>游客因为只需要输入名称登录，但是如果输入空白直接回车会出404问题</li></ul><h3 id="原因" tabindex="-1">原因： <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因：&quot;">​</a></h3><ul><li>使用的history模式，服务器部署出现的错误，交给服务器重新部署之后解决了问题</li></ul><h2 id="_6-掘金原文" tabindex="-1">6. 掘金原文 <a class="header-anchor" href="#_6-掘金原文" aria-label="Permalink to &quot;6. 掘金原文&quot;">​</a></h2><p><a href="https://juejin.cn/post/7493798605658112041?searchId=2025041821435276C06F1BD2408DFEC057" target="_blank" rel="noreferrer">点击跳转</a></p>`,37)),o(s)])}const E=t(l,[["render",n]]);export{y as __pageData,E as default};
