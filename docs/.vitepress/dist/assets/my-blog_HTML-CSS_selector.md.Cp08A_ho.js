import{_ as t,B as r,c as l,o as a,ai as c,G as d}from"./chunks/framework.jrH_H5Hh.js";const _=JSON.parse('{"title":"CSS选择器权重","description":"","frontmatter":{},"headers":[],"relativePath":"my-blog/HTML-CSS/selector.md","filePath":"my-blog/HTML-CSS/selector.md"}'),i={name:"my-blog/HTML-CSS/selector.md"};function n(s,o,p,h,g,u){const e=r("GiscusComment");return a(),l("div",null,[o[0]||(o[0]=c('<h1 id="css选择器权重" tabindex="-1">CSS选择器权重 <a class="header-anchor" href="#css选择器权重" aria-label="Permalink to &quot;CSS选择器权重&quot;">​</a></h1><p>CSS选择器的权重（也称为特异性）是决定样式应用优先级的关键机制。以下是核心规则和计算方式：</p><h2 id="_1-权重等级-从高到低" tabindex="-1">1. 权重等级（从高到低） <a class="header-anchor" href="#_1-权重等级-从高到低" aria-label="Permalink to &quot;1. 权重等级（从高到低）&quot;">​</a></h2><ol><li><p><strong><code>!important</code>声明</strong><br> 强制覆盖所有其他样式（慎用），不参与权重计算但优先级最高。</p></li><li><p><strong>内联样式</strong><br> 如 <code>&lt;div style=&quot;color:red&quot;&gt;</code>，权重值为 <code>1000</code>。</p></li><li><p><strong>ID选择器</strong><br> 如 <code>#header</code>，权重值为 <code>0100</code>。</p></li><li><p><strong>类/伪类/属性选择器</strong></p></li></ol><ul><li>类选择器（<code>.btn</code>）</li><li>伪类（<code>:hover</code>）</li><li>属性选择器（<code>[type=&quot;text&quot;]</code>）<br> 权重值为 <code>0010</code>。</li></ul><ol start="5"><li><strong>元素/伪元素选择器</strong></li></ol><ul><li>标签选择器（<code>div</code>）</li><li>伪元素（<code>::before</code>）<br> 权重值为 <code>0001</code>。</li></ul><ol start="6"><li><strong>通配符/继承样式</strong><br> 如 <code>*</code>、<code>&gt;</code> 等，权重值为 <code>0000</code>。</li></ol><hr><h2 id="_2-权重计算规则" tabindex="-1">2. 权重计算规则 <a class="header-anchor" href="#_2-权重计算规则" aria-label="Permalink to &quot;2. 权重计算规则&quot;">​</a></h2><p>将选择器的各部分权重按 <strong>(a, b, c)</strong> 格式相加：</p><ul><li><strong>a</strong>：ID选择器数量</li><li><strong>b</strong>：类/伪类/属性选择器数量</li><li><strong>c</strong>：元素/伪元素选择器数量</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>选择器 <code>#nav .item li::before</code> 的权重计算：</p><ul><li>1个ID（<code>#nav</code>）→ <code>a=1</code></li><li>1个类（<code>.item</code>）→ <code>b=1</code></li><li>1个元素（<code>li</code>）+ 1个伪元素（<code>::before</code>）→ <code>c=2</code></li></ul><p>最终权重：<strong>(1, 1, 2)</strong></p><hr><h2 id="_3-优先级规则" tabindex="-1">3. 优先级规则 <a class="header-anchor" href="#_3-优先级规则" aria-label="Permalink to &quot;3. 优先级规则&quot;">​</a></h2><ol><li><p><strong>比较权重等级</strong><br> 按 <code>a → b → c</code> 顺序逐级比较，数值大的胜出（如 <code>(1, 0, 0) &gt; (0, 2, 0)</code>）。</p></li><li><p><strong>相同权重时后定义的样式生效</strong><br> 遵循“后来居上”原则。</p></li><li><p><strong><code>!important</code>例外</strong><br> 即使权重低，<code>!important</code>样式也会强制生效（但内联样式的<code>!important</code>优先级更高）。</p></li></ol><hr><h2 id="_4-常见误区" tabindex="-1">4. 常见误区 <a class="header-anchor" href="#_4-常见误区" aria-label="Permalink to &quot;4. 常见误区&quot;">​</a></h2><ul><li><p><strong>权重不是十进制相加</strong><br><code>(0, 1, 0) + (0, 1, 0) ≠ (0, 2, 0)</code>，而是保持独立计数。</p></li><li><p><strong>选择器数量不影响权重等级</strong><br> 100个类选择器（<code>(0, 100, 0)</code>）仍低于1个ID选择器（<code>(1, 0, 0)</code>）。</p></li></ul><hr><h2 id="_5-实用建议" tabindex="-1">5. 实用建议 <a class="header-anchor" href="#_5-实用建议" aria-label="Permalink to &quot;5. 实用建议&quot;">​</a></h2><ul><li>避免滥用 <code>!important</code>，推荐通过合理设计选择器结构控制优先级。</li><li>需要覆盖样式时，可增加选择器的特异性（如添加ID或类）。</li></ul><p>通过理解这些规则，可以更精准地控制CSS样式的应用顺序。如需具体案例演示，可提供代码片段进一步分析。</p>',26)),d(e)])}const m=t(i,[["render",n]]);export{_ as __pageData,m as default};
